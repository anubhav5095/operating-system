#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
int main()
{
    int fd1[2];
    int fd2[2];
    int arrparent[5];
    int arrchild[5];
    pid_t p;
    
    if(pipe(fd1)==-1)
    {
        fprintf(stderr, "Pipe failed");
        return 1;
    }
    if(pipe(fd2)==-1)
    {
        fprintf(stderr, "Pipe failed");
        return 1;
    }
    printf("Input from parent\n");


    int i;
    for(i=0;i<5;i++)
    scanf("%d",&arrparent[i]);
    
    p=fork();
    
    if(p<0)
    {
        fprintf(stderr,"Fork failed");
        return 1;
    }
    
    else if(p==0)               //parent process
    {
        int takechild[5];
        close(fd1[0]);
        
        for(i=0;i<5;i++)
        write(fd1[1], &arrparent[i],4);
        
        close(fd1[1]);
        //wait for child process
        wait(NULL);
        close(fd2[1]);
        
        printf("-took from child\n");
        for(i=0;i<5;i++)
        {
        read(fd2[0], &takechild[i],4);
        printf("%d ",takechild[i]);
        }
        
        close(fd2[0]);
    }
    
    else
    {
       int taking[5];
        close(fd1[1]);
        printf(" -took from parent\n");
        for(i=0;i<5;i++)
        {
        read(fd1[0],&taking[i],4);
        printf("%d ",taking[i]);
        }
        
        close(fd1[0]);
        close(fd2[0]);
        printf("\nInput Numbers from child\n");
        for(i=0;i<5;i++)
        {
        scanf("%d",&arrchild[i]);
        write(fd2[1],&arrchild[i],4);
        }
        close(fd2[1]);
        exit(0);
        
    }
    
}
